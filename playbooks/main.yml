---
- hosts: all
  become: yes

  vars:
    ansible_python_interpreter: "/usr/bin/python3"

  pre_tasks:
    - name: Ensure Package Aptitude is installed
      apt:
        state: latest
        update_cache: yes
        cache_valid_time: 3600
        pkg: aptitude

    - name: Apply Latest OS Patches
      apt:
        state: latest
        upgrade: yes

    - name: Ensure Common System Packages are installed
      apt:
        state: latest
        pkg: "{{ item }}"
      with_items:
        - apt-transport-https
        - ca-certificates
        - software-properties-common
        - curl

  roles:
    - { role: rexray,
        rexray_service: true,
        rexray_storage_drivers: [virtualbox],
        rexray_vbox_volume_path: '"{{ playbook_dir }}/../Volumes"',
        rexray_vbox_endpoint: "http://10.0.2.2:18083",
        rexray_vbox_controller_name: SATA }
    - docker
    

#### DOCKER SWARM CONFIGURE PLAYS
- hosts: manager
  become: true

  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status
    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true


- hosts: worker
  become: true

  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status
    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true
    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true


- hosts: swarm_manager_bootstrap[0]
  become: true

  tasks:
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ swarm_iface | default('eth0') }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node | changed


- hosts: swarm_manager_operational[0]
  become: true

  vars:
    iface: "{{ swarm_iface | default('eth0') }}"

  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"


- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true

  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"

  tasks:
    - name: join manager nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('eth0') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377


- hosts: swarm_worker_bootstrap
  become: true

  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"

  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('eth0') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377
